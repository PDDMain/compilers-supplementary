-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a bunch of regular variables current scope
fun addNamesAndVals (state, names, vals) {
  foldl (fun (s, [name, v]) {s.addName (name, Var (v))}, state, zip(names, vals))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs(state, defs) {
  case defs of
    {}                          -> state
  | Var (names) : ds            -> addNames (addDefs(state, ds), names)
  | Fun (name, args, body) : ds -> addFunction (addDefs(state, ds), name, args, body)
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Scope (d, e)    ->  case eval ([addDefs(enterScope(s), d), w], e) of
                          [[s, w], e] -> [[leaveScope(s), w], e]
                        esac
  | Assn  (ref, e)  ->  case eval (c, e) of
                          [c, v] -> 
                            case eval (c, ref) of 
                              [[s, w], Ref (x)] -> [[s <- [x, Var (v)], w], v]
                            esac
                        esac
  | Seq   (s1, s2)  ->  case eval (c, s1) of
                          [c, _] -> eval (c, s2)
                        esac
  | Read  (ref)     ->  case eval (c, ref) of
                          [[s, w], Ref (x)] -> 
                            case readWorld (w) of
                              [n, w] -> [[s <- [x, Var (n)], w], 0]
                            esac
                        esac
  | Write (e)       ->  case eval (c, e) of
                          [[s, w], r] -> [[s, writeWorld (r, w)], 0]
                        esac
  | If (e, s1, s2)  ->  case eval(c, e) of
                          [c, 0] -> eval(c, s2)
                        | [c, _] -> eval(c, s1)
                        esac
  | While (e, st)   ->  case eval(c, e) of
                          [c, 0] -> [c, 0]
                        | [c, _] -> eval(c, Seq(st, While(e, st)))
                        esac
  | DoWhile (st, e) ->  eval(c, Seq(st, While(e, st)))
  | Var (x)         ->  case lookup (s, x) of 
                          Var (x) -> [c, x] 
                        esac
  | Const (n)       ->  [c, n]
  | Binop (o, l, r) ->  case eval (c, l) of 
                          [c, l] -> 
                            case eval (c, r) of 
                              [c, r] -> [c, evalOp (o, l, r)]
                            esac 
                        esac
  | Ref (e)         ->  [c, Ref (e)]
  | Ignore (e)      ->  case eval (c, e) of
                          [c, _] -> [c, 0]
                        esac
  | Skip            ->  [c, 0]
  | Call (f, exprs) ->  case lookup (s, f) of
                          Fun (args, body) -> 
                            case evalList (c, exprs) of
                              [c@[s, w], vals] ->
                                var sFun = addNamesAndVals (enterFunction (s), args, vals);
                                case eval ([sFun, w], body) of
                                  [[sFun, w], v] -> [[leaveFunction (s, getGlobal(sFun)), w], v]
                                esac
                            esac
                        esac
  -- | _               -> failure ("expr not implemented\n")
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}