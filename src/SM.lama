-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (l)    -> sprintf ("CJMP %s", l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {}              ->  c
  | READ : cs       ->  case readWorld(world) of 
                          [r, newWorld]  -> eval(env, [r:stack, state, newWorld], cs) 
                        esac
  | WRITE : cs      ->  case stack of
                          (w:stackTail)   -> eval(env, [stackTail, state, writeWorld(w, world)], cs)
                        esac
  | BINOP (op) : cs ->  case stack of
                          (y:x:stackTail) -> eval(env, [evalOp(op, x, y) : stackTail, state, world], cs)
                        esac
  | LD  (x) : cs    ->  eval(env, [state (x) : stack, state, world], cs)
  | LDA (x) : cs    ->  eval(env, [REF (x)   : stack, state, world], cs)
  | ST  (x) : cs    ->  case stack of
                          (r:stackTail)   -> 
                            eval(env, [stackTail  , state <- [x, r], world], cs)
                        esac
  | STI    : cs    ->  case stack of
                          (v:REF(x):stackTail) ->
                            eval(env, [v:stackTail, state <- [x, v], world], cs)
                        esac
  | CONST (n) : cs  ->  eval(env, [n:stack, state, world], cs)
  | LABEL (l) : cs  ->  eval(env, c, cs)
  | JMP   (l) : cs  ->  eval(env, c, env.fromLabel(l))
  | CJMP  (l) : cs  ->  case stack of
                          (x:stackTail)   ->  if x then
                                                eval(env, [stackTail, state, world], env.fromLabel(l))
                                              else
                                                eval(env, [stackTail, state, world], cs)
                                              fi
                        esac
  | DROP      : cs  ->  case stack of 
                          _ : stackTail -> eval(env, [stackTail, state, world], cs)
                        esac  
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var   (x)         -> [false, env, singletonBuffer (LD (x))]
    | Ref   (x)         -> [false, env, singletonBuffer (LDA (x))]
    | Const (n)         -> [false, env, singletonBuffer (CONST (n))]
    
    ----added by pddmain----
    | Read  (x)         ->  case env.genLabel of
                              [sLab, env] -> 
                                case compile (sLab, env, x) of
                                  [sLabUsed, env, code] -> [false, env, code <+>
                                                                        label(sLab, sLabUsed) <+
                                                                        READ <+ 
                                                                        STI <+
                                                                        DROP]
                                esac
                            esac
    | Ignore (e)        ->  case env.genLabel of
                              [sLab, env] -> 
                                case compile (sLab, env, e) of
                                  [sLabUsed, env, code] -> 
                                    [false, env, code <+> label (sLab, sLabUsed) <+ DROP]
                                esac
                            esac
    | Write (e)         ->  case env.genLabel of
                              [sLab, env] -> 
                                case compile (sLab, env, e) of
                                  [sLabUsed, env, code] -> 
                                    [false, env, code <+> label (sLab, sLabUsed) <+ WRITE]
                                esac
                            esac
    | Assn  (x, e)      ->  case env.genLabel of
                              [sLab, env] -> 
                                case env.genLabel of
                                  [xLab, env] -> 
                                    case compile (xLab, env, x) of
                                      [xLabUsed, env, xCode] -> 
                                        case compile (sLab, env, e) of
                                          [sLabUsed, env, sCode] -> 
                                            [false, env,  xCode <+> 
                                                          label(xLab, xLabUsed) <+> 
                                                          sCode <+> 
                                                          label(sLab, sLabUsed) <+ 
                                                          STI]
                                        esac
                                    esac
                                esac
                            esac
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env,  s1Code <+> 
                                                              label (s2Lab, s2LabUsed) <+> 
                                                              s2Code]
                  esac
             esac
        esac
    | If    (e, s1, s2) -> 
        case env.genLabel of
          [labS1, env] ->
            case env.genLabel of
              [labE2, env] ->
                case env.genLabel of
                  [labExpr, env] ->
                    case compile(labE2, env, s2) of
                      [labE2Used, env, s2Code] ->
                        case compile(lab, env, s1) of
                          [_, env, s1Code] -> 
                            case compile(labExpr, env, e) of
                              [labExprUsed, env, exprCode] -> [true, env,  exprCode <+>
                                                                      label(labExpr, labExprUsed) <+
                                                                      CJMP(labS1) <+>
                                                                      s2Code <+>
                                                                      label(labE2, labE2Used) <+
                                                                      JMP(lab) <+
                                                                      LABEL(labS1) <+>
                                                                      s1Code]
                            esac
                        esac
                    esac
                esac 
            esac
        esac                                                  
    | While (e, s)      -> 
        case env.genLabel of 
          [labS, env] -> 
            case env.genLabel of 
              [labE, env] -> 
                case env.genLabel of
                  [labExpr, env] ->
                    case compile(labE, env, s) of
                      [_, env, s] -> 
                        case compile(labExpr, env, e) of
                          [labExprUsed, env, exprCode] -> [false, env, singletonBuffer(JMP(labE)) <+ 
                                                                  LABEL(labS) <+> 
                                                                  s <+ 
                                                                  LABEL(labE) <+> 
                                                                  exprCode <+>
                                                                  label(labExpr, labExprUsed) <+
                                                                  CJMP(labS) ]
                        esac
                    esac 
                esac
            esac 
        esac
    | DoWhile (s, e)    -> 
        case env.genLabel of 
          [labS, env] -> 
            case env.genLabel of
              [labE, env] ->
                case env.genLabel of
                  [labExpr, env] ->
                    case compile(labE, env, s) of
                      [labEUsed, env, s] -> 
                        case compile(labExpr, env, e) of
                          [labExprUsed, env, exprCode] -> [false, env, singletonBuffer(LABEL(labS)) <+> 
                                                                  s <+>
                                                                  label(labE, labEUsed) <+>
                                                                  exprCode <+>
                                                                  label(labExpr, labExprUsed) <+ 
                                                                  CJMP(labS) ]
                        esac
                    esac
                esac 
            esac
        esac
    | Binop (o, l, r)   ->  case env.genLabel of
                              [lLab, env] ->
                                case env.genLabel of
                                  [rLab, env] ->
                                    case compile (lLab, env, l) of
                                      [lLabUsed, env, lCode] ->
                                        case compile (rLab, env, r) of
                                          [rLabUsed, env, rCode] -> [false, env,  lCode <+> 
                                                                                    label (lLab, lLabUsed) <+> 
                                                                                    rCode <+>
                                                                                    label (rLab, rLabUsed) <+
                                                                                    BINOP (o)]
                                        esac
                                    esac
                                esac
                            esac
    -- | _                 -> failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
